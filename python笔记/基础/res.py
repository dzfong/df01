#coding=utf-8



#正则表达式
#正则表达式是一种用来匹配字符串的强有力的武器，它的设计思想是用一种描述性的语言来给字符串定义一个规则
#凡是符合规则的字符串，我们认为它匹配了，否则，该字符串就是不合法

#  \d   	可以匹配一个数字
#  \w   	可以匹配一个字母或数字
#  .    	可以匹配任意字符
#  *    	表示任意个字符（包含0个）
#  +		表示最少一个字符
#  ?		表示0个或1个字符
#  {n}		表示n个字符
#  {n,m}	表示n-m个字符
 

#   \d{3}\s+\d{3,8}   
#   解读：
#   	\d{3} 表示匹配3个数字，如：010
#   	\s    表示可以匹配一个空格（也包含Tab等空白符），所以\s+表示至少一个空格
#   	\d{3,8} 表示3-8个数字，例如：1234567
 


#  进阶
#  要做到更精确的匹配，可以用[]表示范围
#  
#  [0-9a-zA-Z\_]    表示可以匹配一个数字、字母或者下划线
#  [0-9a-zA-Z\_]+	表示可以匹配至少由一个数字、字母或者下划线
#  [a-zA-Z\_][0-9a-zA-Z\_]*  表示可以匹配由字母或下划线开头，后接任意个由一个数字、字母或者下划线组成的字符串，也就是Python合法的变量
#  [a-zA-Z\_][0-9a-zA-Z\_]{0,19} 更精确的限制了变量的长度是1-20个字符（前面1个字符+后面最多19个字符）
#  A|B 可以匹配A或B ,所以 (P|p)ython 可以匹配'Python' 或者 'python'
#  ^ 表示行的开头， ^\d表示必须以数字开头
#  $ 表示行的结束，\d$ 表示必须以数字结束




#re模块
#Python提供re模块，包含了所有正则表达式的功能，由于Python的字符串本身也用\转义，所以强烈要求使用r前缀，就不用考虑转义的问题了



import re
re.match(r'^\d{3}\_\d{3,8}$','010-12345')
re.match(r'\d{3}\-\d{3,8}$','010 12345')


test = input("请输入邮箱：")
res = r'^[0-9a-zA-Z][0-9a-zA-Z\_]+@[0-9a-zA-Z]+.(com|net|com.cn|cn)'
if re.match(res,test):
	print('OK')
else:
	print('格式不正确')


#切分字符串
str = 'a b    c'
char = str.split(' ')
print(char)  #切分成 ['a','b','','','','c']

char = re.split(r'\s+',str)
print(char)   #切分成['a','b','c']

#分组
#()
m = re.match(r'^(\d{3})-(\d{3,8})$','010-123456')
print(m.group(0))    # group(0):永远是原始字符串 010-123456
print(m.group(1))	 #010
print(m.group(2))    #123456


